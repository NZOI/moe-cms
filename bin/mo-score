#!/usr/bin/perl

$debug = 0;
$detail = 0;
$html = 0;
$tex = 0;
$usage = "Usage: mo-score [--detail] [--html] [--tex] <task1> <task2> ...";
while (($arg = $ARGV[0]) =~ /^--([a-z]+)$/) {
	shift @ARGV;
	$var = "\$$1";
	if (!eval "defined $var") { die $usage; }
	eval "$var = 1;";
}
@ARGV || die $usage;

print STDERR "Scanning contestants... ";
open (CT, "bin/mo-get-users --full |") || die "Cannot get list of contestants";
while (<CT>) {
	chomp;
	($u,$f) = split /\t/;
	$users{$u}=$f;
}
close CT;
print STDERR 0+keys %users, "\n";

print STDERR "Scanning task results... ";
foreach $u (keys %users) {
	opendir (D, "testing/$u") or next;
	foreach $t (readdir(D)) {
		$t =~ /^\./ && next;
		$known_tasks{$t} = 1;
		$tt = "testing/$u/$t/points";
		-f $tt || next;
		print STDERR "$u/$t ";
		open (X, $tt) || die "Unable to open $tt";
		while (<X>) {
			chomp;
			/^(\d+) (\d+)(.*)/ || die "Parse error: $_";
			$ttest = $1;
			$tpts = $2;
			$trem = $3;
			$known_tests{$t}{$ttest} = 1;
			$results{$u}{$t}{$ttest} = $tpts;
			$remarks{$u}{$t}{$ttest} = $trem;
			$cmt = $tpts;
			if ($tpts == 0) {
				$msg = $3;
				if ($msg =~ /^Compile /) { $cmt = "CE"; }
				elsif ($msg =~ /^Time limit exceeded/) { $cmt = "TO"; }
				elsif ($msg =~ /^Exited with error /) { $cmt = "RE"; }
				elsif ($msg =~ /^Caught fatal signal /) { $cmt = "SG"; }
			}
			$comment{$u}{$t}{$ttest} = $cmt;
			$total{$u}{$t} += $tpts;
		}
		close X;
	}
	closedir D;
}
print STDERR "OK\n";

print STDERR "Creating table template... ";
@header = ("Rank","User","Name");
@body = ('','$u','$users{$u}');
@bodysums = ();
@footer = ('"Total"','','');
foreach $t (@ARGV) {
	defined $known_tasks{$t} || die "Unknown task $t";
	push @header, "$t";
	push @body, "\$total{\$u}{'$t'}";
	$col = 0+@footer;
	push @footer, "sum($col)";
	push @bodysums, $col;
	if ($detail) {
		foreach $s (sort { $a <=> $b } keys %{$known_tests{$t}}) {
			push @header, "$s";
			push @body, "\$comment{\$u}{'$t'}{'$s'}";
			$col = 0+@footer;
			push @footer, "sum($col)";
		}
	}
}
push @header, "Total";
push @body, join('+', map { $_ = "\$$_" } @bodysums);
$col = 0+@footer;
push @footer, "sum($col)";
print STDERR "OK\n";

print STDERR "h: ", join(':',@header), "\n" if $debug;
print STDERR "b: ", join(':',@body), "\n" if $debug;
print STDERR "f: ", join(':',@footer), "\n" if $debug;

print STDERR "Filling in results... ";
@table = ();
foreach $u (keys %users) {
	$row = [];
	foreach my $c (@body) {
		$c =~ s/\$(\d+)/\$\$row[$1]/g;
		$x = eval $c;
		push @$row, (defined $x ? $x : '-');
	}
	print STDERR "row: ", join(':',@$row), "\n" if $debug;
	push @table, $row;
}
print STDERR "OK\n";

print STDERR "Sorting... ";
$sortcol = @{$table[0]} - 1;
$namecol = 2;
@table = sort {
	my $p, $an, $bn;
	$p = $$b[$sortcol] <=> $$a[$sortcol];
	($an = $$a[$namecol]) =~ s/(\S+)\s+(\S+)/$2 $1/;
	($bn = $$b[$namecol]) =~ s/(\S+)\s+(\S+)/$2 $1/;
	$p ? $p : ($an cmp $bn);
} @table;
$i=0;
while ($i < @table) {
	$j = $i;
	while ($i < @table && ${$table[$i]}[$sortcol] == ${$table[$j]}[$sortcol]) {
		$i++;
	}
	if ($i == $j+1) {
		${table[$j]}[0] = "$i.";
	} else {
		${table[$j]}[0] = $j+1 . ".--" . $i . ".";
		$j++;
		while ($j < $i) { ${table[$j++]}[0] = ""; };
	}
}
print STDERR "OK\n";

print STDERR "Attaching headers and footers... ";
sub sum { my $col=shift @_; my $t=0; foreach my $z (0..@table-1) { $t += ${$table[$z]}[$col]; } $t; }
map { $_ = eval $_; } @footer;
push @table, \@footer;
unshift @table, \@header;
print STDERR "OK\n";

if ($debug) {
	foreach $r (@table) { print join(':',@$r), "\n"; }
} elsif ($html) {
	print '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html40/strict.dtd">', "\n";
	print "<HTML><HEAD><TITLE>Rank list</TITLE></HEAD><BODY>\n";
	print "<H1>Rank list</H1>\n";
	print "<TABLE>\n";
	$hdr = 1;
	foreach $r (@table) {
		print "<TR>", join('',map {
			if ($hdr) { $_ = "<TH>$_"; }
			else { $_ = "<TD align=" . (/^[0-9-]+$/ ? "right" : "left") . ">$_"; }
		} @$r), "\n";
		$hdr = 0;
	}
	print "</TABLE>\n";
	print "</BODY></HTML>\n";
} elsif ($tex) {
	print "\\error{TeX output not supported yet!}\n";
} else {
	foreach $r (@table) { print join("\t",@$r), "\n"; }
}
